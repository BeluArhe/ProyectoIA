"""
Sistema de Diagn√≥stico M√©dico usando Redes Bayesianas con PyMC
Versi√≥n completamente funcional
"""

import numpy as np
import matplotlib.pyplot as plt
import networkx as nx
import arviz as az
import pymc as pm

# Configuraci√≥n inicial
np.set_printoptions(precision=3, suppress=True)

# ======================
# DEFINICI√ìN DE LA RED
# ======================

def crear_modelo_bayesiano(sintomas_observados=None):
    """
    Crea y devuelve el modelo bayesiano para diagn√≥stico m√©dico con PyMC
    Versi√≥n completamente funcional
    """
    with pm.Model() as modelo:
        # 1. Distribuci√≥n de probabilidad para Predisposici√≥n Gen√©tica (PG)
        pg_probs = np.array([0.3, 0.4, 0.3])  # Alta, Media, Baja
        pg = pm.Categorical('PG', p=pg_probs)
        
        # Gripe dado PG
        p_gripe = pm.math.switch(
            pm.math.eq(pg, 0), 0.6,  # PG Alta
            pm.math.switch(
                pm.math.eq(pg, 1), 0.4,  # PG Media
                0.2  # PG Baja
            )
        )
        gripe = pm.Bernoulli('Gripe', p=p_gripe)
        
        # Neumon√≠a dado PG
        p_neumonia = pm.math.switch(
            pm.math.eq(pg, 0), 0.7,  # PG Alta
            pm.math.switch(
                pm.math.eq(pg, 1), 0.5,  # PG Media
                0.3  # PG Baja
            )
        )
        neumonia = pm.Bernoulli('Neumonia', p=p_neumonia)
        
        # Fiebre dado Gripe y Neumon√≠a
        p_fiebre = pm.math.switch(
            pm.math.and_(pm.math.eq(gripe, 1), pm.math.eq(neumonia, 1)), 0.9,
            pm.math.switch(
                pm.math.and_(pm.math.eq(gripe, 1), pm.math.eq(neumonia, 0)), 0.8,
                pm.math.switch(
                    pm.math.and_(pm.math.eq(gripe, 0), pm.math.eq(neumonia, 1)), 0.7,
                    0.1  # Ninguna
                )
            )
        )
        fiebre = pm.Bernoulli('Fiebre', p=p_fiebre,
                        observed=sintomas_observados.get('Fiebre') if sintomas_observados and 'Fiebre' in sintomas_observados else None)

        # Tos dado Neumon√≠a
        p_tos = pm.math.switch(
            pm.math.eq(neumonia, 1), 0.8,  # Neumon√≠a=S√≠
            0.3  # Neumon√≠a=No
        )
        tos = pm.Bernoulli('Tos', p=p_tos,
                        observed=sintomas_observados.get('Tos') if sintomas_observados and 'Tos' in sintomas_observados else None)

        # Dolor de cabeza dado Gripe
        p_dolor = pm.math.switch(
            pm.math.eq(gripe, 1), 0.7,  # Gripe=S√≠
            0.2  # Gripe=No
        )
        dolor_cabeza = pm.Bernoulli('Dolor_cabeza', p=p_dolor,
                        observed=sintomas_observados.get('Dolor_cabeza') if sintomas_observados and 'Dolor_cabeza' in sintomas_observados else None)
    
    return modelo

# ======================
# FUNCIONES DE DIAGN√ìSTICO
# ======================

def diagnosticar(sintomas):
    """
    Realiza un diagn√≥stico basado en los s√≠ntomas observados
    Versi√≥n corregida y funcional
    """
    try:
        # Define los valores posibles por variable
        valores_posibles = {
            'PG': ['Alta', 'Media', 'Baja'],       # codificados como 0,1,2
            'Gripe': ['No', 'S√≠'],                 # codificados como 0,1
            'Neumonia': ['No', 'S√≠'],              
            'Fiebre': ['No', 'S√≠'],                 
            'Tos': ['No', 'S√≠'],
            'Dolor_cabeza': ['No', 'S√≠']
        }

        # Convertir s√≠ntomas a valores num√©ricos (1=S√≠, 0=No)
        sintomas_numericos = {}
        for nombre, v in sintomas.items():
            if v.lower() in ['s√≠', 'si', 's']:
                sintomas_numericos[nombre] = 1
                valores_posibles.pop(nombre, None)
            elif v.lower() in ['no', 'n']:
                sintomas_numericos[nombre] = 0
                valores_posibles.pop(nombre, None)
        
        # Crear modelo con las observaciones
        modelo = crear_modelo_bayesiano(sintomas_numericos)
        
        # Realizar inferencia con configuraci√≥n m√°s robusta
        with modelo:
            trace = pm.sample(
                draws=2000,
                tune=1000,
                chains=2,
                return_inferencedata=True,
                progressbar=True
            )
    
        # Calcular probabilidades manualmente
        resultados = {}
        for enf in valores_posibles:
            muestras = trace.posterior[enf].values.flatten()
            probs = {}
            for idx, estado in enumerate(valores_posibles[enf]):
                probs[estado] = np.mean(muestras == idx)
            resultados[enf] = probs

        return resultados, trace
    
    except Exception as e:
        print(f"\nError durante el diagn√≥stico: {str(e)}")
        print("Posibles causas:")
        print("- S√≠ntomas no ingresados correctamente (deben ser 'S√≠' o 'No')")
        print("- Problemas de convergencia del modelo")
        return None, None

# Resto del c√≥digo (visualizar_red, mostrar_diagnostico, main) permanece igual...
def mostrar_diagnostico(resultados):
    """Muestra los resultados del diagn√≥stico de forma clara"""
    if resultados is None:
        print("\nNo se pudo realizar el diagn√≥stico. Verifique los s√≠ntomas ingresados.")
        return
    
    print("\n=== RESULTADOS DEL DIAGN√ìSTICO ===")

    for nombre_variable, estados in resultados.items():
        print(f"{nombre_variable}:")
        for estado, prob in estados.items():
            bar = '‚ñà' * int(prob * 20)
            print(f"  {estado:<12}: {prob:.3f} |{bar:<20}| {prob * 100:.1f}%")
        print()

def visualizar_red():
    """Visualiza la estructura de la red bayesiana con mejor formato"""
    G = nx.DiGraph()
    
    # A√±adir nodos y conexiones
    edges = [
        ("Predisposici√≥n\nGen√©tica", "Gripe"),
        ("Predisposici√≥n\nGen√©tica", "Neumon√≠a"),
        ("Gripe", "Fiebre"),
        ("Neumon√≠a", "Fiebre"),
        ("Neumon√≠a", "Tos"),
        ("Gripe", "Dolor de\ncabeza")
    ]
    G.add_edges_from(edges)
    
    pos = {
        "Predisposici√≥n\nGen√©tica": (0, 1),
        "Gripe": (-1, 0),
        "Neumon√≠a": (1, 0),
        "Fiebre": (0, -1),
        "Tos": (1.5, -0.5),
        "Dolor de\ncabeza": (-1.5, -0.5)
    }
    
    plt.figure(figsize=(12, 8))
    nx.draw(G, pos, with_labels=True, node_size=5000, 
           node_color='lightgreen', font_size=10, 
           font_weight='bold', arrowsize=20, 
           edge_color='gray', width=2)
    plt.title("Red Bayesiana de Diagn√≥stico M√©dico", fontsize=14, pad=20)
    plt.tight_layout()
    plt.show()

def main():
    """Funci√≥n principal con interfaz mejorada"""
    
    # Banner de inicio
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë  SISTEMA DE DIAGN√ìSTICO M√âDICO   ‚ïë
    ‚ïë       (Modelo Bayesiano)         ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    # Visualizar la red al inicio
    print("\nüñ•Ô∏è  Visualizando estructura de la red bayesiana...")
    visualizar_red()
    
    # Casos de prueba demostrativos
    print("\nüî¨ Ejecutando casos de prueba demostrativos...")
    
    # Caso 1
    print("\nCaso 1 : Paciente con fiebre y tos")
    print("S√≠ntomas: Fiebre='S√≠', Tos='S√≠', Dolor_cabeza='No'")
    diag, trace = diagnosticar({'Fiebre': 'S√≠', 'Tos': 'S√≠', 'Dolor_cabeza': 'No'})
    if diag:
        mostrar_diagnostico(diag)
    else:
        print("No se pudo realizar el diagn√≥stico. Verifique los s√≠ntomas ingresados.")
    
    # Caso 2
    print("\nCaso 2 : Paciente con tos y gripe")
    print("S√≠ntomas: Tos='S√≠', Gripe='S√≠'")
    diag, trace = diagnosticar({'Tos': 'S√≠', 'Gripe': 'S√≠'})
    if diag:
        mostrar_diagnostico(diag)
    else:
        print("No se pudo realizar el diagn√≥stico. Verifique los s√≠ntomas ingresados.")
    
    # Modo interactivo mejorado
    # 4. Modo interactivo
    print("\n=== MODO INTERACTIVO ===")
    print("Ingrese los s√≠ntomas del paciente (responda 's√≠' o 'no' para cada uno)")
    
    while True:
        print("\n" + "‚ïê"*50)
        sintomas = {}
        
        # Solicitar s√≠ntomas con validaci√≥n
        for sintoma in ['Fiebre', 'Tos', 'Dolor_cabeza']:
            while True:
                valor = input(f"¬øEl paciente tiene {sintoma.lower()}? [s√≠/no]: ").strip()
                if valor.lower() in ['s√≠', 'si', 's', 'n', 'no']:
                    sintomas[sintoma] = 'S√≠' if valor.lower() in ['s√≠', 'si', 's'] else 'No'
                    break
                print("‚ö†Ô∏è Por favor ingrese 's√≠' o 'no'")
        
        # Realizar diagn√≥stico
        print("\nüîç Analizando s√≠ntomas...")
        diag, trace = diagnosticar(sintomas)
        mostrar_diagnostico(diag)

         # Preguntar por otro diagn√≥stico
        if input("\n¬øDesea realizar otro diagn√≥stico? [s/n]: ").lower() != 's':
            print("\nüëã ¬°Gracias por usar el sistema de diagn√≥stico!")
            break

if __name__ == "__main__":
    # Configuraci√≥n adicional para mejor visualizaci√≥n
    plt.style.use('seaborn')
    np.random.seed(42)  # Para reproducibilidad
    
    main()